// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Composable, Options as Options2, TDataShape } from './client'
import { client } from './client.gen'
import type { GetCinemasByCinemaIdSessionsData, GetCinemasByCinemaIdSessionsError, GetCinemasByCinemaIdSessionsResponse, GetCinemasData, GetCinemasResponse, GetMeBookingsData, GetMeBookingsError, GetMeBookingsResponse, GetMoviesByMovieIdSessionsData, GetMoviesByMovieIdSessionsError, GetMoviesByMovieIdSessionsResponse, GetMoviesData, GetMovieSessionsByMovieSessionIdData, GetMovieSessionsByMovieSessionIdError, GetMovieSessionsByMovieSessionIdResponse, GetMoviesResponse, GetSettingsData, GetSettingsResponse, PostBookingsByBookingIdPaymentsData, PostBookingsByBookingIdPaymentsError, PostBookingsByBookingIdPaymentsResponse, PostLoginData, PostLoginError, PostLoginResponse, PostMovieSessionsByMovieSessionIdBookingsData, PostMovieSessionsByMovieSessionIdBookingsError, PostMovieSessionsByMovieSessionIdBookingsResponse, PostRegisterData, PostRegisterError, PostRegisterResponse } from './types.gen'

export type Options<TComposable extends Composable = '$fetch', TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = Options2<TComposable, TData, ResT, DefaultT> & {
  /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
  client?: Client
  /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
  meta?: Record<string, unknown>
}

/**
 * Вход пользователя
 *
 * Аутентификация пользователя и получение JWT токена.
 */
export const postLogin = <TComposable extends Composable = '$fetch', DefaultT extends PostLoginResponse = PostLoginResponse>(options: Options<TComposable, PostLoginData, PostLoginResponse, DefaultT>) => {
  return (options.client ?? client).post<TComposable, PostLoginResponse | DefaultT, PostLoginError, DefaultT>({
    url: '/login',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Регистрация нового пользователя
 *
 * Регистрация нового пользователя в системе.
 */
export const postRegister = <TComposable extends Composable = '$fetch', DefaultT extends PostRegisterResponse = PostRegisterResponse>(options: Options<TComposable, PostRegisterData, PostRegisterResponse, DefaultT>) => {
  return (options.client ?? client).post<TComposable, PostRegisterResponse | DefaultT, PostRegisterError, DefaultT>({
    url: '/register',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Оплатить бронирование
 *
 * Отмечает бронирование как оплаченное.
 */
export const postBookingsByBookingIdPayments = <TComposable extends Composable = '$fetch', DefaultT extends PostBookingsByBookingIdPaymentsResponse = PostBookingsByBookingIdPaymentsResponse>(options: Options<TComposable, PostBookingsByBookingIdPaymentsData, PostBookingsByBookingIdPaymentsResponse, DefaultT>) => {
  return (options.client ?? client).post<TComposable, PostBookingsByBookingIdPaymentsResponse | DefaultT, PostBookingsByBookingIdPaymentsError, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/bookings/{bookingId}/payments',
    ...options,
  })
}

/**
 * Получить список кинотеатров
 *
 * Возвращает список всех доступных кинотеатров.
 */
export const getCinemas = <TComposable extends Composable = '$fetch', DefaultT extends GetCinemasResponse = GetCinemasResponse>(options: Options<TComposable, GetCinemasData, GetCinemasResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetCinemasResponse | DefaultT, unknown, DefaultT>({
    url: '/cinemas',
    ...options,
  })
}

/**
 * Получить сеансы для кинотеатра
 *
 * Возвращает список всех доступных сеансов для указанного кинотеатра.
 */
export const getCinemasByCinemaIdSessions = <TComposable extends Composable = '$fetch', DefaultT extends GetCinemasByCinemaIdSessionsResponse = GetCinemasByCinemaIdSessionsResponse>(options: Options<TComposable, GetCinemasByCinemaIdSessionsData, GetCinemasByCinemaIdSessionsResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetCinemasByCinemaIdSessionsResponse | DefaultT, GetCinemasByCinemaIdSessionsError, DefaultT>({
    url: '/cinemas/{cinemaId}/sessions',
    ...options,
  })
}

/**
 * Получить список фильмов
 *
 * Возвращает список всех доступных фильмов.
 */
export const getMovies = <TComposable extends Composable = '$fetch', DefaultT extends GetMoviesResponse = GetMoviesResponse>(options: Options<TComposable, GetMoviesData, GetMoviesResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetMoviesResponse | DefaultT, unknown, DefaultT>({
    url: '/movies',
    ...options,
  })
}

/**
 * Получить список киносеансов для фильма
 *
 * Возвращает список всех доступных киносеансов для указанного фильма.
 */
export const getMoviesByMovieIdSessions = <TComposable extends Composable = '$fetch', DefaultT extends GetMoviesByMovieIdSessionsResponse = GetMoviesByMovieIdSessionsResponse>(options: Options<TComposable, GetMoviesByMovieIdSessionsData, GetMoviesByMovieIdSessionsResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetMoviesByMovieIdSessionsResponse | DefaultT, GetMoviesByMovieIdSessionsError, DefaultT>({
    url: '/movies/{movieId}/sessions',
    ...options,
  })
}

/**
 * Получить детали сеанса
 *
 * Возвращает детальную информацию о сеансе, включая забронированные места.
 */
export const getMovieSessionsByMovieSessionId = <TComposable extends Composable = '$fetch', DefaultT extends GetMovieSessionsByMovieSessionIdResponse = GetMovieSessionsByMovieSessionIdResponse>(options: Options<TComposable, GetMovieSessionsByMovieSessionIdData, GetMovieSessionsByMovieSessionIdResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetMovieSessionsByMovieSessionIdResponse | DefaultT, GetMovieSessionsByMovieSessionIdError, DefaultT>({
    url: '/movieSessions/{movieSessionId}',
    ...options,
  })
}

/**
 * Забронировать места на киносеанс
 *
 * Бронирует указанные места на киносеанс для аутентифицированного пользователя.
 */
export const postMovieSessionsByMovieSessionIdBookings = <TComposable extends Composable = '$fetch', DefaultT extends PostMovieSessionsByMovieSessionIdBookingsResponse = PostMovieSessionsByMovieSessionIdBookingsResponse>(options: Options<TComposable, PostMovieSessionsByMovieSessionIdBookingsData, PostMovieSessionsByMovieSessionIdBookingsResponse, DefaultT>) => {
  return (options.client ?? client).post<TComposable, PostMovieSessionsByMovieSessionIdBookingsResponse | DefaultT, PostMovieSessionsByMovieSessionIdBookingsError, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/movieSessions/{movieSessionId}/bookings',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options.headers,
    },
  })
}

/**
 * Получить настройки приложения
 *
 * Возвращает текущие настройки приложения, включая время, в течение которого бронирование должно быть оплачено.
 */
export const getSettings = <TComposable extends Composable = '$fetch', DefaultT extends GetSettingsResponse = GetSettingsResponse>(options: Options<TComposable, GetSettingsData, GetSettingsResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetSettingsResponse | DefaultT, unknown, DefaultT>({
    url: '/settings',
    ...options,
  })
}

/**
 * Получить список бронирований пользователя
 *
 * Возвращает список всех бронирований, сделанных текущим аутентифицированным пользователем.
 */
export const getMeBookings = <TComposable extends Composable = '$fetch', DefaultT extends GetMeBookingsResponse = GetMeBookingsResponse>(options: Options<TComposable, GetMeBookingsData, GetMeBookingsResponse, DefaultT>) => {
  return (options.client ?? client).get<TComposable, GetMeBookingsResponse | DefaultT, GetMeBookingsError, DefaultT>({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/me/bookings',
    ...options,
  })
}
