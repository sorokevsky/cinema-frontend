// This file is auto-generated by @hey-api/openapi-ts

export type ClientOptions = {
    baseURL: 'http://localhost:3022' | (string & {});
};

/**
 * Пользователь системы
 */
export type User = {
    /**
     * Идентификатор пользователя
     */
    id?: number;
    /**
     * Имя пользователя
     */
    name?: string;
    /**
     * Хеш пароля
     */
    password_hash?: string;
};

/**
 * Фильм
 */
export type Movie = {
    /**
     * Идентификатор фильма
     */
    id?: number;
    /**
     * Название фильма
     */
    title?: string;
    /**
     * Описание фильма
     */
    description?: string;
    /**
     * Год выпуска
     */
    year?: number;
    /**
     * Продолжительность в минутах
     */
    lengthMinutes?: number;
    /**
     * URL постера
     */
    posterImage?: string;
    /**
     * Рейтинг
     */
    rating?: number;
};

/**
 * Кинотеатр
 */
export type Cinema = {
    /**
     * Идентификатор кинотеатра
     */
    id?: number;
    /**
     * Название кинотеатра
     */
    name?: string;
    /**
     * Адрес кинотеатра
     */
    address?: string;
};

/**
 * Киносеанс
 */
export type MovieSession = {
    /**
     * Идентификатор сеанса
     */
    id?: number;
    /**
     * Идентификатор фильма
     */
    movieId?: number;
    /**
     * Идентификатор кинотеатра
     */
    cinemaId?: number;
    /**
     * Время начала сеанса
     */
    startTime?: string;
};

/**
 * Киносеанс с информацией о размерах зала
 */
export type MovieSessionWithSeats = MovieSession & {
    seats?: {
        /**
         * Количество рядов
         */
        rows?: number;
        /**
         * Количество мест в ряду
         */
        seatsPerRow?: number;
    };
};

/**
 * Место в кинозале
 */
export type Seat = {
    /**
     * Номер ряда
     */
    rowNumber?: number;
    /**
     * Номер места
     */
    seatNumber?: number;
};

/**
 * Детали сеанса фильма
 */
export type MovieSessionDetails = MovieSessionWithSeats & {
    bookedSeats?: Array<Seat>;
};

/**
 * Бронирование пользователя
 */
export type Booking = {
    /**
     * Идентификатор бронирования
     */
    id?: string;
    /**
     * Идентификатор пользователя
     */
    userId?: number;
    /**
     * Идентификатор киносеанса
     */
    movieSessionId?: number;
    /**
     * Идентификатор сеанса
     */
    sessionId?: number;
    /**
     * Дата бронирования
     */
    bookedAt?: string;
    /**
     * Забронированные места
     */
    seats?: Array<Seat>;
    /**
     * Статус оплаты
     */
    isPaid?: boolean;
};

/**
 * Стандартный ответ об ошибке
 */
export type ErrorResponse = {
    /**
     * Сообщение об ошибке
     */
    message?: string;
    /**
     * Детали ошибки (опционально)
     */
    error?: string;
};

/**
 * Настройки приложения
 */
export type Settings = {
    /**
     * Время в секундах, в течение которого бронирование должно быть оплачено
     */
    bookingPaymentTimeSeconds?: number;
};

export type PostLoginData = {
    body: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/login';
};

export type PostLoginErrors = {
    /**
     * Требуется имя пользователя и пароль
     */
    400: ErrorResponse;
    /**
     * Неверное имя пользователя или пароль
     */
    401: ErrorResponse;
};

export type PostLoginError = PostLoginErrors[keyof PostLoginErrors];

export type PostLoginResponses = {
    /**
     * JWT токен
     */
    200: {
        token?: string;
    };
};

export type PostLoginResponse = PostLoginResponses[keyof PostLoginResponses];

export type PostRegisterData = {
    body: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/register';
};

export type PostRegisterErrors = {
    /**
     * Требуется имя пользователя и пароль
     */
    400: ErrorResponse;
    /**
     * Имя пользователя уже существует
     */
    409: ErrorResponse;
    /**
     * Ошибка регистрации
     */
    500: ErrorResponse;
};

export type PostRegisterError = PostRegisterErrors[keyof PostRegisterErrors];

export type PostRegisterResponses = {
    /**
     * Пользователь успешно зарегистрирован
     */
    200: {
        token?: string;
    };
};

export type PostRegisterResponse = PostRegisterResponses[keyof PostRegisterResponses];

export type PostBookingsByBookingIdPaymentsData = {
    body?: never;
    path: {
        /**
         * Идентификатор бронирования
         */
        bookingId: string;
    };
    query?: never;
    url: '/bookings/{bookingId}/payments';
};

export type PostBookingsByBookingIdPaymentsErrors = {
    /**
     * Бронирование не найдено.
     */
    404: {
        message?: string;
    };
    /**
     * Бронирование уже оплачено.
     */
    409: {
        message?: string;
    };
    /**
     * Внутренняя ошибка сервера.
     */
    500: {
        message?: string;
    };
};

export type PostBookingsByBookingIdPaymentsError = PostBookingsByBookingIdPaymentsErrors[keyof PostBookingsByBookingIdPaymentsErrors];

export type PostBookingsByBookingIdPaymentsResponses = {
    /**
     * Бронирование успешно оплачено
     */
    200: {
        message?: string;
    };
};

export type PostBookingsByBookingIdPaymentsResponse = PostBookingsByBookingIdPaymentsResponses[keyof PostBookingsByBookingIdPaymentsResponses];

export type GetCinemasData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cinemas';
};

export type GetCinemasResponses = {
    /**
     * Список кинотеатров
     */
    200: Array<Cinema>;
};

export type GetCinemasResponse = GetCinemasResponses[keyof GetCinemasResponses];

export type GetCinemasByCinemaIdSessionsData = {
    body?: never;
    path: {
        cinemaId: number;
    };
    query?: never;
    url: '/cinemas/{cinemaId}/sessions';
};

export type GetCinemasByCinemaIdSessionsErrors = {
    /**
     * Кинотеатр не найден
     */
    404: ErrorResponse;
};

export type GetCinemasByCinemaIdSessionsError = GetCinemasByCinemaIdSessionsErrors[keyof GetCinemasByCinemaIdSessionsErrors];

export type GetCinemasByCinemaIdSessionsResponses = {
    /**
     * Список киносеансов
     */
    200: Array<MovieSession>;
};

export type GetCinemasByCinemaIdSessionsResponse = GetCinemasByCinemaIdSessionsResponses[keyof GetCinemasByCinemaIdSessionsResponses];

export type GetMoviesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/movies';
};

export type GetMoviesResponses = {
    /**
     * Список фильмов
     */
    200: Array<Movie>;
};

export type GetMoviesResponse = GetMoviesResponses[keyof GetMoviesResponses];

export type GetMoviesByMovieIdSessionsData = {
    body?: never;
    path: {
        /**
         * Идентификатор фильма
         */
        movieId: number;
    };
    query?: never;
    url: '/movies/{movieId}/sessions';
};

export type GetMoviesByMovieIdSessionsErrors = {
    /**
     * Фильм не найден
     */
    404: ErrorResponse;
};

export type GetMoviesByMovieIdSessionsError = GetMoviesByMovieIdSessionsErrors[keyof GetMoviesByMovieIdSessionsErrors];

export type GetMoviesByMovieIdSessionsResponses = {
    /**
     * Список киносеансов с фильмом
     */
    200: Array<MovieSession>;
};

export type GetMoviesByMovieIdSessionsResponse = GetMoviesByMovieIdSessionsResponses[keyof GetMoviesByMovieIdSessionsResponses];

export type GetMovieSessionsByMovieSessionIdData = {
    body?: never;
    path: {
        movieSessionId: number;
    };
    query?: never;
    url: '/movieSessions/{movieSessionId}';
};

export type GetMovieSessionsByMovieSessionIdErrors = {
    /**
     * Сеанс не найден
     */
    404: ErrorResponse;
};

export type GetMovieSessionsByMovieSessionIdError = GetMovieSessionsByMovieSessionIdErrors[keyof GetMovieSessionsByMovieSessionIdErrors];

export type GetMovieSessionsByMovieSessionIdResponses = {
    /**
     * Детали киносеанса
     */
    200: MovieSessionDetails;
};

export type GetMovieSessionsByMovieSessionIdResponse = GetMovieSessionsByMovieSessionIdResponses[keyof GetMovieSessionsByMovieSessionIdResponses];

export type PostMovieSessionsByMovieSessionIdBookingsData = {
    body: {
        seats?: Array<Seat>;
    };
    path: {
        movieSessionId: number;
    };
    query?: never;
    url: '/movieSessions/{movieSessionId}/bookings';
};

export type PostMovieSessionsByMovieSessionIdBookingsErrors = {
    /**
     * Неверное тело запроса
     */
    400: ErrorResponse;
    /**
     * Неавторизованный доступ
     */
    401: ErrorResponse;
    /**
     * Доступ запрещен
     */
    403: ErrorResponse;
    /**
     * Киносеанс не найден
     */
    404: ErrorResponse;
    /**
     * Места уже забронированы
     */
    409: ErrorResponse;
};

export type PostMovieSessionsByMovieSessionIdBookingsError = PostMovieSessionsByMovieSessionIdBookingsErrors[keyof PostMovieSessionsByMovieSessionIdBookingsErrors];

export type PostMovieSessionsByMovieSessionIdBookingsResponses = {
    /**
     * Бронирование успешно
     */
    200: {
        bookingId?: string;
    };
};

export type PostMovieSessionsByMovieSessionIdBookingsResponse = PostMovieSessionsByMovieSessionIdBookingsResponses[keyof PostMovieSessionsByMovieSessionIdBookingsResponses];

export type GetSettingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/settings';
};

export type GetSettingsResponses = {
    /**
     * Настройки приложения
     */
    200: Settings;
};

export type GetSettingsResponse = GetSettingsResponses[keyof GetSettingsResponses];

export type GetMeBookingsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me/bookings';
};

export type GetMeBookingsErrors = {
    /**
     * Неавторизованный доступ. Отсутствует или недействителен токен аутентификации.
     */
    401: ErrorResponse;
    /**
     * Внутренняя ошибка сервера.
     */
    500: ErrorResponse;
};

export type GetMeBookingsError = GetMeBookingsErrors[keyof GetMeBookingsErrors];

export type GetMeBookingsResponses = {
    /**
     * Список бронирований пользователя
     */
    200: Array<Booking>;
};

export type GetMeBookingsResponse = GetMeBookingsResponses[keyof GetMeBookingsResponses];
